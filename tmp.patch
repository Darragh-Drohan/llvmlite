diff --git a/examples/printer-passes-npm.py b/examples/printer-passes-npm.py
index 6f9c14e..8f67cd4 100644
--- a/examples/printer-passes-npm.py
+++ b/examples/printer-passes-npm.py
@@ -1,3 +1,5 @@
+# Demonstrates the printer and view passes in the new pass manager
+
 try:
     import faulthandler; faulthandler.enable()
 except ImportError:
@@ -80,6 +82,7 @@ pm.add_dom_only_printer_pass()
 pm.add_post_dom_printer_pass()
 pm.add_post_dom_only_printer_pass()
 pm.add_dom_only_printer_pass()
+#Uncomment the following to launch viewers as required
 # pm.add_post_dom_viewer_pass()
 # pm.add_dom_viewer_pass()
 # pm.add_post_dom_only_viewer_pass()
diff --git a/ffi/PASSREGISTRY.def b/ffi/PASSREGISTRY.def
index cb4f19c..d79bf71 100644
--- a/ffi/PASSREGISTRY.def
+++ b/ffi/PASSREGISTRY.def
@@ -57,7 +57,6 @@ FUNCTION_PASS(MemCpyOptPass)
 FUNCTION_PASS(UnifyFunctionExitNodesPass)
 FUNCTION_PASS(ReassociatePass)
 FUNCTION_PASS(RegToMemPass)
-// FIXME: FUNCTION_PASS(SROAPass)
 FUNCTION_PASS(SinkingPass)
 FUNCTION_PASS(TailCallElimPass)
 FUNCTION_PASS(InstructionNamerPass)
diff --git a/ffi/newpassmanagers.cpp b/ffi/newpassmanagers.cpp
index 7c964eb..ab66906 100644
--- a/ffi/newpassmanagers.cpp
+++ b/ffi/newpassmanagers.cpp
@@ -554,6 +554,27 @@ LLVMPY_buildFunctionSimplificationPipeline(LLVMPassBuilderRef PBref,
     return llvm::wrap(FPM);
 }
 
+// TODO: From LLVM 16 SROA takes parameter whether to preserve cfg or not which
+// can be exposed in the Python API https://reviews.llvm.org/D138238
+API_EXPORT(void)
+LLVMPY_module_AddSROAPass(LLVMModulePassManagerRef MPM) {
+#if LLVM_VERSION_MAJOR < 16
+    llvm::unwrap(MPM)->addPass(createModuleToFunctionPassAdaptor(SROAPass()));
+#else
+    llvm::unwrap(MPM)->addPass(
+        createModuleToFunctionPassAdaptor(SROAPass(PreserveCFG = true)));
+#endif
+}
+
+API_EXPORT(void)
+LLVMPY_function_AddSROAPass(LLVMFunctionPassManagerRef FPM) {
+#if LLVM_VERSION_MAJOR < 16
+    llvm::unwrap(FPM)->addPass(SROAPass());
+#else
+    llvm::unwrap(FPM)->addPass(SROAPass(true));
+#endif
+}
+
 API_EXPORT(void)
 LLVMPY_module_AddModuleDebugInfoPrinterPass(LLVMModulePassManagerRef MPM) {
     llvm::unwrap(MPM)->addPass(ModuleDebugInfoPrinterPass(llvm::outs()));
@@ -593,30 +614,4 @@ LLVMPY_module_AddModuleDebugInfoPrinterPass(LLVMModulePassManagerRef MPM) {
     }
 #include "PASSREGISTRY.def"
 
-API_EXPORT(const char *)
-LLVMPY_getModuleLevelPasses() {
-    std::string module_passes;
-
-#define MODULE_PASS(NAME) module_passes = module_passes + " " + TOSTRING(NAME);
-#define FUNCTION_PASS(NAME)                                                    \
-    module_passes = module_passes + " " + TOSTRING(NAME);
-#define LOOP_PASS(NAME) module_passes = module_passes + " " + TOSTRING(NAME);
-#include "PASSREGISTRY.def"
-
-    return LLVMPY_CreateString(module_passes.c_str());
-}
-
-API_EXPORT(const char *)
-LLVMPY_getFunctionLevelPasses() {
-    std::string function_passes;
-
-#define FUNCTION_PASS(NAME)                                                    \
-    function_passes = function_passes + " " + TOSTRING(NAME);
-#define LOOP_PASS(NAME)                                                        \
-    function_passes = function_passes + " " + TOSTRING(NAME);
-#include "PASSREGISTRY.def"
-
-    return LLVMPY_CreateString(function_passes.c_str());
-}
-
 } // end extern "C"
diff --git a/llvmlite/binding/newpassmanagers.py b/llvmlite/binding/newpassmanagers.py
index 82093e1..e92c862 100644
--- a/llvmlite/binding/newpassmanagers.py
+++ b/llvmlite/binding/newpassmanagers.py
@@ -28,18 +28,6 @@ class RefPruneSubpasses(IntFlag):
     ALL = PER_BB | DIAMOND | FANOUT | FANOUT_RAISE
 
 
-def get_module_level_passes():
-    passes = _decode_string(ffi.lib.LLVMPY_getModuleLevelPasses())
-    passes = [p for p in passes.split(' ') if len(p) > 0]
-    return passes
-
-
-def get_function_level_passes():
-    passes = _decode_string(ffi.lib.LLVMPY_getFunctionLevelPasses())
-    passes = [p for p in passes.split(' ') if len(p) > 0]
-    return passes
-
-
 class NewPassManager():
 
     def __init__(self):
@@ -244,13 +232,11 @@ class NewPassManager():
         else:
             ffi.lib.LLVMPY_function_AddRegToMemPass(self)
 
-    # FIXME: SROA now takes parameter whether to preserve cfg or not
-    # https://reviews.llvm.org/D138238
-    # def add_sroa_pass(self):
-    #     if isinstance(self, ModulePassManager):
-    #         ffi.lib.LLVMPY_module_AddSROAPass(self)
-    #     else:
-    #         ffi.lib.LLVMPY_function_AddSROAPass(self)
+    def add_sroa_pass(self):
+        if isinstance(self, ModulePassManager):
+            ffi.lib.LLVMPY_module_AddSROAPass(self)
+        else:
+            ffi.lib.LLVMPY_function_AddSROAPass(self)
 
     def add_sinking_pass(self):
         if isinstance(self, ModulePassManager):
@@ -660,8 +646,8 @@ ffi.lib.LLVMPY_module_AddReassociatePass.argtypes = [
 ffi.lib.LLVMPY_module_AddRegToMemPass.argtypes = [
     ffi.LLVMModulePassManagerRef,]
 
-# ffi.lib.LLVMPY_module_AddSROAPass.argtypes = [
-#     ffi.LLVMModulePassManagerRef,]
+ffi.lib.LLVMPY_module_AddSROAPass.argtypes = [
+    ffi.LLVMModulePassManagerRef,]
 
 ffi.lib.LLVMPY_module_AddSinkingPass.argtypes = [
     ffi.LLVMModulePassManagerRef,]
@@ -847,9 +833,8 @@ ffi.lib.LLVMPY_function_AddReassociatePass.argtypes = [
 ffi.lib.LLVMPY_function_AddRegToMemPass.argtypes = [
     ffi.LLVMFunctionPassManagerRef, ]
 
-# FIXME SROA is disabled
-# ffi.lib.LLVMPY_function_AddSROAPass.argtypes = [
-#     ffi.LLVMFunctionPassManagerRef, ]
+ffi.lib.LLVMPY_function_AddSROAPass.argtypes = [
+    ffi.LLVMFunctionPassManagerRef, ]
 
 ffi.lib.LLVMPY_function_AddSinkingPass.argtypes = [
     ffi.LLVMFunctionPassManagerRef, ]
@@ -951,6 +936,3 @@ ffi.lib.LLVMPY_buildFunctionSimplificationPipeline.restype = \
 
 ffi.lib.LLVMPY_buildFunctionSimplificationPipeline.argtypes = [
     ffi.LLVMPassBuilderRef, c_int, c_int]
-
-ffi.lib.LLVMPY_getFunctionLevelPasses.restype = c_char_p
-ffi.lib.LLVMPY_getModuleLevelPasses.restype = c_char_p
diff --git a/llvmlite/tests/test_binding.py b/llvmlite/tests/test_binding.py
index fc5d4a7..caa95bd 100644
--- a/llvmlite/tests/test_binding.py
+++ b/llvmlite/tests/test_binding.py
@@ -2511,7 +2511,7 @@ class TestPasses(BaseTest, PassManagerTestMixin):
         pm.add_instruction_combining_pass()
         pm.add_licm_pass()
         pm.add_sccp_pass()
-        # pm.add_sroa_pass()
+        pm.add_sroa_pass()
         pm.add_type_based_alias_analysis_pass()
         pm.add_basic_alias_analysis_pass()
         pm.add_loop_rotate_pass()
@@ -3210,7 +3210,7 @@ class TestNewModulePassManager(BaseTest, NewPassManagerMixin):
         mpm.add_unify_function_exit_nodes_pass()
         mpm.add_reassociate_pass()
         mpm.add_register_to_memory_pass()
-        # mpm.add_sroa_pass()
+        mpm.add_sroa_pass()
         mpm.add_sinking_pass()
         mpm.add_tail_call_elimination_pass()
         mpm.add_instruction_namer_pass()
@@ -3319,7 +3319,7 @@ class TestNewFunctionPassManager(BaseTest, NewPassManagerMixin):
         fpm.add_unify_function_exit_nodes_pass()
         fpm.add_reassociate_pass()
         fpm.add_register_to_memory_pass()
-        # fpm.add_sroa_pass()
+        fpm.add_sroa_pass()
         fpm.add_sinking_pass()
         fpm.add_tail_call_elimination_pass()
         fpm.add_instruction_namer_pass()
